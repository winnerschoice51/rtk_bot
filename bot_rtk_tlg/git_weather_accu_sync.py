import requests
import os
import pickle
import time
from datetime import datetime

ACCUWEATHER_API_KEY = "FFFvelgKB64FGNAxS4lWj83T9N6lq3UO"
LOCATION_NAME = "–ü–æ–ª—è—Ä–Ω—ã–π"

CACHE_DIR = "weather_cache"
os.makedirs(CACHE_DIR, exist_ok=True)

def log(msg):
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {msg}")

def cache_load(name, max_age_sec, use_cache=True):
    if not use_cache:
        log(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫ –∫–µ—à–∞ –¥–ª—è {name}")
        return None
    path = os.path.join(CACHE_DIR, f"{name}.pkl")
    if not os.path.exists(path):
        return None
    if time.time() - os.path.getmtime(path) > max_age_sec:
        log(f"üìõ –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª: {name}")
        return None
    try:
        with open(path, "rb") as f:
            log(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫–µ—à–∞: {name}")
            return pickle.load(f)
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–µ—à–∞ {name}: {e}")
        return None

def cache_save(name, data):
    path = os.path.join(CACHE_DIR, f"{name}.pkl")
    try:
        with open(path, "wb") as f:
            pickle.dump(data, f)
        log(f"üì¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à: {name}")
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ—à–∞ {name}: {e}")

def clear_cache():
    if not os.path.exists(CACHE_DIR):
        return
    for file in os.listdir(CACHE_DIR):
        os.remove(os.path.join(CACHE_DIR, file))
    log("üßπ –ö–µ—à –æ—á–∏—â–µ–Ω")

def get_location_key(location_name, use_cache=True):
    cache_key = f"location_{location_name.lower()}"
    cached = cache_load(cache_key, 86400, use_cache)
    if cached:
        return cached

    url = f"http://dataservice.accuweather.com/locations/v1/cities/search"
    params = {
        "apikey": ACCUWEATHER_API_KEY,
        "q": location_name,
        "language": "ru-ru"
    }
    log("üåê –ó–∞–ø—Ä–æ—Å –∫–ª—é—á–∞ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç AccuWeather‚Ä¶")
    resp = requests.get(url, params=params)
    if resp.status_code != 200:
        return None
    data = resp.json()
    if not data:
        return None

    result = (data[0]['Key'], data[0]['LocalizedName'])
    cache_save(cache_key, result)
    return result

def time_of_day(hour):
    if 6 <= hour < 12:
        return '—É—Ç—Ä–æ'
    elif 12 <= hour < 18:
        return '–¥–µ–Ω—å'
    elif 18 <= hour < 22:
        return '–≤–µ—á–µ—Ä'
    else:
        return '–Ω–æ—á—å'

def summarize_period(period_hours):
    if not period_hours:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    temps = [h['Temperature']['Value'] for h in period_hours]
    descs = [h['IconPhrase'] for h in period_hours]
    desc = max(set(descs), key=descs.count)

    precip_probs = [h.get('PrecipitationProbability', 0) for h in period_hours]
    max_precip = max(precip_probs) if precip_probs else 0

    min_temp = round(min(temps))
    max_temp = round(max(temps))
    temp_str = f"{min_temp}¬∞C" if min_temp == max_temp else f"{min_temp}‚Äì{max_temp}¬∞C"
    precip_str = f", –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {max_precip}%" if max_precip > 0 else ""

    return f"{temp_str}, {desc}{precip_str}"

def get_weather_full(use_cache=True):
    location_info = get_location_key(LOCATION_NAME, use_cache)
    if location_info is None:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥."

    location_key, localized_name = location_info

    # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
    current_cache_key = f"current_{location_key}"
    current_data = cache_load(current_cache_key, 900, use_cache)
    if not current_data:
        log("üåê –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã‚Ä¶")
        url_current = f"http://dataservice.accuweather.com/currentconditions/v1/{location_key}"
        params_current = {
            "apikey": ACCUWEATHER_API_KEY,
            "language": "ru-ru",
            "details": "true"
        }
        resp = requests.get(url_current, params=params_current)
        if resp.status_code != 200:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É."
        current_data = resp.json()
        if not current_data:
            return "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ."
        cache_save(current_cache_key, current_data)

    current = current_data[0]
    temp = current["Temperature"]["Metric"]["Value"]
    feels_like = current["RealFeelTemperature"]["Metric"]["Value"]
    description = current["WeatherText"]
    wind_speed = current["Wind"]["Speed"]["Metric"]["Value"]
    humidity = current["RelativeHumidity"]
    observation_time = current["LocalObservationDateTime"][:19].replace("T", " ")

    emoji = weather_emoji(description)

    # –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
    hourly_cache_key = f"hourly_{location_key}"
    hourly_data = cache_load(hourly_cache_key, 1800, use_cache)
    if not hourly_data:
        log("üåê –ó–∞–ø—Ä–æ—Å –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞‚Ä¶")
        url_hourly = f"http://dataservice.accuweather.com/forecasts/v1/hourly/12hour/{location_key}"
        params_hourly = {
            "apikey": ACCUWEATHER_API_KEY,
            "language": "ru-ru",
            "metric": "true"
        }
        resp = requests.get(url_hourly, params=params_hourly)
        if resp.status_code != 200:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑."
        hourly_data = resp.json()
        if not hourly_data:
            return "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞."
        cache_save(hourly_cache_key, hourly_data)

    parts = {'—É—Ç—Ä–æ': [], '–¥–µ–Ω—å': [], '–≤–µ—á–µ—Ä': [], '–Ω–æ—á—å': []}
    for hour_info in hourly_data:
        dt_obj = datetime.fromisoformat(hour_info['DateTime'][:-6])
        tod = time_of_day(dt_obj.hour)
        parts[tod].append(hour_info)

    morning = summarize_period(parts['—É—Ç—Ä–æ'])
    day = summarize_period(parts['–¥–µ–Ω—å'])
    evening = summarize_period(parts['–≤–µ—á–µ—Ä'])
    night = summarize_period(parts['–Ω–æ—á—å'])

    message = (
        f"üå§ –ü–æ–≥–æ–¥–∞ {observation_time}\n\n"
        f" –°–µ–π—á–∞—Å:\n"
        f"  {emoji} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(temp)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(feels_like)}¬∞C)\n"
        f"  –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}\n"
        f"  –í–µ—Ç–µ—Ä: {round(wind_speed, 1)} –º/—Å\n"
        f"  –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è:\n"
        f"  üåÖ –£—Ç—Ä–æ: {morning}\n"
        f"  ‚òÄÔ∏è –î–µ–Ω—å: {day}\n"
        f"  üåá –í–µ—á–µ—Ä: {evening}\n"
        f"  üåô –ù–æ—á—å: {night}"
    )

    return message

def weather_emoji(description: str) -> str:
    desc = description.lower()
    if any(x in desc for x in ['–¥–æ–∂–¥—å', '–ª–∏–≤–µ–Ω—å', '–º–æ—Ä–æ—Å—å']):
        return "üåßÔ∏è"
    elif any(x in desc for x in ['–≥—Ä–æ–∑–∞', '—à—Ç–æ—Ä–º']):
        return "‚õàÔ∏è"
    elif any(x in desc for x in ['—Å–Ω–µ–≥', '–º–µ—Ç–µ–ª—å']):
        return "‚ùÑÔ∏è"
    elif any(x in desc for x in ['—Ç—É–º–∞–Ω', '–¥—ã–º', '–¥—ã–º–∫–∞', '–ø—ã–ª—å']):
        return "üå´Ô∏è"
    elif any(x in desc for x in ['–ø–∞—Å–º—É—Ä–Ω–æ', '–æ–±–ª–∞—á–Ω–æ']):
        return "‚òÅÔ∏è"
    elif any(x in desc for x in ['—è—Å–Ω–æ', '—Å–æ–ª–Ω–µ—á–Ω–æ']):
        return "‚òÄÔ∏è"
    elif any(x in desc for x in ['–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', '–ø–µ—Ä–µ–º–µ–Ω–Ω–æ']):
        return "‚õÖ"
    else:
        return "üåà"

if __name__ == '__main__':
    # –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:
    # clear_cache()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:
    # print(get_weather_full(use_cache=False))

    print(get_weather_full())
