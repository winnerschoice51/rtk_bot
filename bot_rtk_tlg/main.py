import os
import nest_asyncio
import aiohttp
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes
)
from telegram.request import HTTPXRequest
from rarfile import RarFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from get_weather_from_accu import ACCUWEATHER_API_KEY
from get_weather_accu_sunc import *
from get_weather_from_openweathermap import *

nest_asyncio.apply()

BOT_TOKEN = '8058971937:AAFjf3Gc9tCX5jpl3-0eM6qfCf7TEW10SsU'
USERS_FILE = "users.txt"
import sys

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (—Ç–µ–±—è –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –¥—Ä—É–≥–∏—Ö)
ADMINS = {7606152113}  # —Å—é–¥–∞ –≤–ø–∏—à–∏ —Å–≤–æ–∏ ID Telegram


async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await update.message.reply_text("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã watcher –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ
    sys.exit(0)


menu_keyboard = [
    ["–ì—Ä–∞—Ñ–∏–∫ –º–∞—Å—Ç–µ—Ä–æ–≤", "–ì—Ä–∞—Ñ–∏–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤"],
    ["–ü–æ–ª–µ–∑–Ω—ã–µ –Ω–æ–º–µ—Ä–∞", "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
    ["–ü—Ä–æ—à–∏–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"],

]
reply_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True)


def load_users():
    if not os.path.exists(USERS_FILE):
        return set()
    with open(USERS_FILE, "r") as f:
        return set(int(line.strip()) for line in f if line.strip().isdigit())


def save_user(user_id: int):
    users = load_users()
    if user_id not in users:
        with open(USERS_FILE, "a") as f:
            f.write(f"{user_id}\n")


def wind_direction(deg):
    dirs = [
        "—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
        "—é–∂–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
    ]
    ix = round(deg / 45) % 8
    return dirs[ix]


def weather_icon(weather_id):
    if 200 <= weather_id < 300:
        return "‚õàÔ∏è"
    elif 300 <= weather_id < 400:
        return "üå¶Ô∏è"
    elif 500 <= weather_id < 600:
        return "üåßÔ∏è"
    elif 600 <= weather_id < 700:
        return "‚ùÑÔ∏è"
    elif 700 <= weather_id < 800:
        return "üå´Ô∏è"
    elif weather_id == 800:
        return "‚òÄÔ∏è"
    elif weather_id == 801:
        return "üå§Ô∏è"
    elif 802 <= weather_id <= 804:
        return "‚òÅÔ∏è"
    else:
        return "üåà"


def format_entry(name, entry):
    if not entry:
        return f"üïí <b>{name}</b>: <i>–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>"

    weather_id = entry["weather"][0]["id"]
    icon = weather_icon(weather_id)
    weather_desc = entry["weather"][0]["description"].capitalize()
    temp = entry["main"]["temp"]
    feels = entry["main"]["feels_like"]
    humidity = entry["main"]["humidity"]
    wind_mps = entry["wind"]["speed"]
    wind_kph = wind_mps * 3.6
    wind_deg = entry["wind"].get("deg", 0)
    wind_dir = wind_direction(wind_deg)
    rain = entry.get("rain", {}).get("3h", 0.0)
    snow = entry.get("snow", {}).get("3h", 0.0)

    rain_snow = ""
    if rain:
        rain_snow += f", üåß {rain} –º–º"
    if snow:
        rain_snow += f", ‚ùÑÔ∏è {snow} –º–º"

    return (
        f"üïí <b>{name}</b>: {icon} {weather_desc}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:+.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels:+.1f}¬∞C)\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind_kph:.1f} –∫–º/—á, {wind_dir}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%{rain_snow}"
    )


TARGET_HOURS = [1, 8, 14, 19]


async def get_weather_full():
    url = (f"https://api.openweathermap.org/data/2.5/forecast?q={LOCATION}"
           f"&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru")

    proxy = os.getenv("http_proxy") or os.getenv("https_proxy")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, proxy=proxy) as resp:
                data = await resp.json()
                if resp.status != 200 or "list" not in data:
                    return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ö–æ–¥ {resp.status}"

                utc_offset = timedelta(hours=3)  # —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π, –µ—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

                now = datetime.utcnow() + utc_offset

                results = {}

                for target_hour in TARGET_HOURS:
                    closest_entry = None
                    min_diff = timedelta(days=10)  # –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

                    for entry in data["list"]:
                        dt_utc = datetime.strptime(entry["dt_txt"], "%Y-%m-%d %H:%M:%S")
                        dt_local = dt_utc + utc_offset

                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞—Ç—ã —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                        if dt_local < now:
                            continue

                        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å —Ü–µ–ª–µ–≤—ã–º —á–∞—Å–æ–º –∏–ª–∏ –ø–æ–∑–∂–µ
                        # –ï—Å–ª–∏ —á–∞—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –±–æ–ª—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Å–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å, —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
                        # —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                        if dt_local.hour == target_hour or dt_local.hour > target_hour:
                            diff = dt_local - now
                            if diff < min_diff:
                                min_diff = diff
                                closest_entry = entry

                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –±–ª–∏–∂–∞–π—à–µ–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–Ω–∞ –≤—Å—è–∫–∏–π)
                    if not closest_entry:
                        for entry in data["list"]:
                            dt_utc = datetime.strptime(entry["dt_txt"], "%Y-%m-%d %H:%M:%S")
                            dt_local = dt_utc + utc_offset
                            diff = abs(dt_local.hour - target_hour)
                            if diff < min_diff:
                                min_diff = diff
                                closest_entry = entry

                    if closest_entry:
                        weather = closest_entry["weather"][0]["description"].capitalize()
                        temp = closest_entry["main"]["temp"]
                        feels_like = closest_entry["main"]["feels_like"]
                        wind_speed = closest_entry["wind"]["speed"] * 3.6  # –º/—Å –≤ –∫–º/—á
                        wind_deg = closest_entry["wind"].get("deg", 0)
                        humidity = closest_entry["main"]["humidity"]

                        def deg_to_dir(deg):
                            dirs = ['—Å–µ–≤–µ—Ä–Ω—ã–π', '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', '–≤–æ—Å—Ç–æ—á–Ω—ã–π', '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π',
                                    '—é–∂–Ω—ã–π', '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π', '–∑–∞–ø–∞–¥–Ω—ã–π', '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π']
                            ix = int((deg + 22.5) // 45) % 8
                            return dirs[ix]

                        wind_dir = deg_to_dir(wind_deg)

                        results[target_hour] = {
                            "desc": weather,
                            "temp": temp,
                            "feels_like": feels_like,
                            "wind_speed": wind_speed,
                            "wind_dir": wind_dir,
                            "humidity": humidity
                        }
                    else:
                        results[target_hour] = None

                time_labels = {
                    1: "üåô –ù–æ—á—å (01:00)",
                    8: "üåÖ –£—Ç—Ä–æ (08:00)",
                    14: "‚òÄÔ∏è –î–µ–Ω—å (14:00)",
                    19: "üåá –í–µ—á–µ—Ä (19:00)"
                }

                parts = []
                for hour in TARGET_HOURS:
                    r = results.get(hour)
                    if r:
                        part = (f"{time_labels[hour]}:\n"
                                f"  {r['desc']}\n"
                                f"  üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {r['temp']:+.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {r['feels_like']:+.1f}¬∞C)\n"
                                f"  üí® –í–µ—Ç–µ—Ä: {r['wind_speed']:.1f} –∫–º/—á, {r['wind_dir']}\n"
                                f"  üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {r['humidity']}%")
                    else:
                        part = f"{time_labels[hour]}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    parts.append(part)

                return "üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:\n\n" + "\n\n".join(parts)

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}"


async def send_weather_to_all(app):
    # weather = await get_weather_full()
    weather = await get_weather_accu_sunc()

    message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –º–∏—Ä! –°–µ–≥–æ–¥–Ω—è –Ω–∞—Å –æ–∂–∏–¥–∞–µ—Ç —Ç–∞–∫–∞—è –ø–æ–≥–æ–¥–∞:\n\n{weather}"
    for user_id in load_users():
        try:
            await app.bot.send_message(chat_id=user_id, text=message, parse_mode="HTML")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user(update.effective_chat.id)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=reply_markup)


async def extract(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rar_path = "firmware.rar"
    extract_dir = "extracted_firmware"

    try:
        if not os.path.exists(rar_path):
            await update.message.reply_text("‚ùå –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        os.makedirs(extract_dir, exist_ok=True)

        with RarFile(rar_path) as rf:
            rf.extractall(path=extract_dir)

        files = os.listdir(extract_dir)
        msg = "‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω. –§–∞–π–ª—ã:\n" + "\n".join(files)
        await update.message.reply_text(msg, parse_mode='HTML')

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    text_responses = {
        "–ü–æ–ª–µ–∑–Ω—ã–µ –Ω–æ–º–µ—Ä–∞": """‚òéÔ∏è –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–ú–ï–†–ê –î–ò–°–ü–ï–¢–ß–ï–†–û–í

–í–∞—Å–∏–ª—å–µ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞:
+79212822470
+79916702832
8(81556)31008

–õ–æ–¥—ã–≥–∏–Ω–∞ –ì–∞–ª–∏–Ω–∞:
+79215162580 (–ª–∏—á–Ω—ã–π)
+79020356086
8(81551)72512

–ú–∞–Ω—ã—á –ú–∞—Ä–∏–Ω–∞:
+79916702834
+79210353530 (–ª–∏—á–Ω—ã–π)
8(81554)63499

–û–ª—å–≥–µ–π–∑–µ—Ä –¢–∞—Ç—å—è–Ω–∞:
+79533005533 (–ª–∏—á–Ω—ã–π)
8(81554)51556

–°–ª–µ–ø–æ–≤–∞ –î–∞—Ä—å—è:
+79118059964

–ö–æ–≤–∞–ª–µ–≤–∞ –ú–∏—Ä–∞–Ω–∞:
+79211552334

–°–∫—Ä–µ–±—Ü–æ–≤–∞ –Æ–ª–∏—è:
+79913839831
8(81554)51299
8(81554)51556

–°—Ç–µ–ø–∞–Ω–æ–≤–∞ –ü–æ–ª–∏–Ω–∞:
+79965617975 (–ª–∏—á–Ω—ã–π)

–§–µ–æ—Ñ–∞–Ω–æ–≤–∞ –ö—Å–µ–Ω–∏—è:
+79052943744 (–ª–∏—á–Ω—ã–π)

–Ø–∫–∏–º–æ–≤–∞ –ï–ª–µ–Ω–∞:
+7(991)6680982
8(81554)63499

üîÜ –ü–û –í–û–ü–†–û–°–ê–ú –û –¢–ê–†–ò–§–ê–•, –ü–†–û–î–ê–ñ–ê–•, –û–ë–û–†–£–î–û–í–ê–ù–ò–Æ, –°–¢–û–ò–ú–û–°–¢–ò :
–ò–≤–∫–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞
+79916702839
+79533075572

–ë—É–ª–∞—Ç–æ–≤–∞ –û–ª—å–≥–∞ +79913839859

–ú–∏—Ö–µ–ª—å—Å–æ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä
+79113293009
+79215153009

‚ò£ –ü–û–õ–ï–ó–ù–´–ï –ù–û–ú–ï–†–ê ‚ò£Ô∏è
–°–≤–µ—Ç–µ–Ω–∫–æ –ù.–ê. +79212866836
–•–∞–∑–æ–≤–∞ –ù.–í. +79212730712
–î—É–±–∏–∫ –ê.–ï. +79113223779

–ì–§–°: <a href="tel:+78003013638">+78003013638</a>
(–¥–æ–±.625 –î–ï–ù–ò–° –ï–í–ì–ï–ù–¨–ï–í–ò–ß –ú–ò–®–ò–ù)
–ü–û–î–î–ï–†–ñ–ö–ê –ö–ò–¢: <a href="tel:+78001000107">+78001000107</a> (–ö–ú–£–¢)
–ü–û–î–î–ï–†–ñ–ö–ê –¶–ö–ò–ó: <a href="tel:+78003019927">+78003019927</a> (–ö–†–ò–ü–¢–û–®–õ–Æ–ó)
–ü–û–î–î–ï–†–ñ–ö–ê: <a href="tel:+78003010212">+7800-301-02-12</a>
–ü–û–î–î–ï–†–ñ–ö–ê –¢2: <a href="tel:+78003006611">+7800-300-6611</a> (–¥–æ–±.6611)
"""
    }

    photo_mapping = {
        "–ì—Ä–∞—Ñ–∏–∫ –º–∞—Å—Ç–µ—Ä–æ–≤": "masters.jpg",
        "–ì—Ä–∞—Ñ–∏–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤": "dispatchers.jpg",
        "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "info.jpg"
    }


    if text == "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã":
        weather = await get_weather_full()
        await update.message.reply_text(weather, parse_mode="HTML")
    elif text in text_responses:
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω parse_mode='HTML' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
        await update.message.reply_text(text_responses[text], parse_mode='HTML')
    elif text in photo_mapping:
        filename = photo_mapping[text]
        try:
            with open(filename, 'rb') as photo:
                await update.message.reply_photo(photo=photo, caption=text)
        except FileNotFoundError:
            await update.message.reply_text("‚ùå –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    elif text == "–ü—Ä–æ—à–∏–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è":
        rar_file = "D-link 1.0.7.tar"
        try:
            if not os.path.exists(rar_file):
                raise FileNotFoundError

            size_mb = os.path.getsize(rar_file) / (1024 * 1024)
            if size_mb > 50:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.2f} MB). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 50MB.")
                return

            with open(rar_file, 'rb') as doc:
                await update.message.reply_document(document=doc, filename=rar_file, caption="–ü—Ä–æ—à–∏–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        except FileNotFoundError:
            await update.message.reply_text("‚ùå –§–∞–π–ª –ø—Ä–æ—à–∏–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}")
    else:
        await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")


async def main():
    request = HTTPXRequest(connect_timeout=10.0, read_timeout=20.0)
    app = ApplicationBuilder().token(BOT_TOKEN).request(request).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("extract", extract))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("restart", restart))

    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_weather_to_all, 'cron', hour=7, minute=30, args=[app])
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling(poll_interval=2.0)


if __name__ == "__main__":
    import os
    import sys

    pid_dir = os.getenv('TEMP', '.')  # –∏–ª–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä '.' ‚Äî —Ç–µ–∫—É—â—É—é
    pidfile = os.path.join(pid_dir, 'telegram_bot.pid')

    if os.path.exists(pidfile):
        print("Already running.")
        sys.exit()

    with open(pidfile, "w") as f:
        f.write(str(os.getpid()))

    try:
        import asyncio

        asyncio.run(main())
    finally:
        os.remove(pidfile)